// <auto-generated />
using System;
using FireDetection.Backend.Domain;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace FireDetection.Backend.Domain.Migrations
{
    [DbContext(typeof(FireDetectionDbContext))]
    partial class FireDetectionDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("FireDetection.Backend.Domain.Entity.Camera", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Cameras");
                });

            modelBuilder.Entity("FireDetection.Backend.Domain.Entity.ControlCamera", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<Guid>("CameraID")
                        .HasColumnType("uuid");

                    b.Property<int>("CameraId")
                        .HasColumnType("integer");

                    b.Property<Guid>("UserID")
                        .HasColumnType("uuid");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CameraId");

                    b.HasIndex("UserId");

                    b.ToTable("ControlCameras");
                });

            modelBuilder.Entity("FireDetection.Backend.Domain.Entity.MediaRecord", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("MediaTypeId")
                        .HasColumnType("integer");

                    b.Property<Guid>("RecordId")
                        .HasColumnType("uuid");

                    b.Property<int>("RecordId1")
                        .HasColumnType("integer");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("MediaTypeId");

                    b.HasIndex("RecordId1");

                    b.ToTable("MediaRecords");
                });

            modelBuilder.Entity("FireDetection.Backend.Domain.Entity.MediaType", b =>
                {
                    b.Property<int>("MediaTypeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("MediaTypeID"));

                    b.Property<string>("MediaName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("MediaTypeID");

                    b.ToTable("MediaTypes");
                });

            modelBuilder.Entity("FireDetection.Backend.Domain.Entity.Record", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<Guid>("CameraID")
                        .HasColumnType("uuid");

                    b.Property<int>("CameraId")
                        .HasColumnType("integer");

                    b.Property<int>("Percent")
                        .HasColumnType("integer");

                    b.Property<string>("RecordTime")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("UserID")
                        .HasColumnType("uuid");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CameraId");

                    b.HasIndex("UserId");

                    b.ToTable("Records");
                });

            modelBuilder.Entity("FireDetection.Backend.Domain.Entity.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("RoleId"));

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("RoleId");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("FireDetection.Backend.Domain.Entity.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("isActive")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("FireDetection.Backend.Domain.Entity.ControlCamera", b =>
                {
                    b.HasOne("FireDetection.Backend.Domain.Entity.Camera", "Camera")
                        .WithMany("ControlCameras")
                        .HasForeignKey("CameraId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FireDetection.Backend.Domain.Entity.User", "User")
                        .WithMany("ControlCameras")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Camera");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FireDetection.Backend.Domain.Entity.MediaRecord", b =>
                {
                    b.HasOne("FireDetection.Backend.Domain.Entity.MediaType", "MediaType")
                        .WithMany("MediaRecords")
                        .HasForeignKey("MediaTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FireDetection.Backend.Domain.Entity.Record", "Record")
                        .WithMany("MediaRecords")
                        .HasForeignKey("RecordId1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MediaType");

                    b.Navigation("Record");
                });

            modelBuilder.Entity("FireDetection.Backend.Domain.Entity.Record", b =>
                {
                    b.HasOne("FireDetection.Backend.Domain.Entity.Camera", "Camera")
                        .WithMany("Records")
                        .HasForeignKey("CameraId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FireDetection.Backend.Domain.Entity.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Camera");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FireDetection.Backend.Domain.Entity.User", b =>
                {
                    b.HasOne("FireDetection.Backend.Domain.Entity.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("FireDetection.Backend.Domain.Entity.Camera", b =>
                {
                    b.Navigation("ControlCameras");

                    b.Navigation("Records");
                });

            modelBuilder.Entity("FireDetection.Backend.Domain.Entity.MediaType", b =>
                {
                    b.Navigation("MediaRecords");
                });

            modelBuilder.Entity("FireDetection.Backend.Domain.Entity.Record", b =>
                {
                    b.Navigation("MediaRecords");
                });

            modelBuilder.Entity("FireDetection.Backend.Domain.Entity.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("FireDetection.Backend.Domain.Entity.User", b =>
                {
                    b.Navigation("ControlCameras");
                });
#pragma warning restore 612, 618
        }
    }
}
